diff --git a/configure.ac b/configure.ac
index c4c1751e2e..2aa280f2f8 100644
--- a/configure.ac
+++ b/configure.ac
@@ -143,7 +143,7 @@ dnl Path where UAM modules shall be installed
 AC_ARG_WITH(uams-path, [  --with-uams-path=PATH   path to UAMs [[$libdir/netatalk]]], [uams_path="$withval"], [uams_path="$libdir/netatalk"])
 
 dnl Check for libgcrypt, if found enables DHX2 UAM
-AC_NETATALK_PATH_LIBGCRYPT([1:1.2.3])
+AC_NETATALK_LIBGCRYPT
 
 dnl Check for openssl, if found enables DHX UAM and Randnum UAM
 AC_NETATALK_PATH_SSL
diff --git a/macros/libgcrypt.m4 b/macros/libgcrypt.m4
index 4874172972..a8223fd6d8 100644
--- a/macros/libgcrypt.m4
+++ b/macros/libgcrypt.m4
@@ -1,126 +1,26 @@
-dnl AM_PATH_LIBGCRYPT([MINIMUM-VERSION,
-dnl                   [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND ]]])
-dnl Test for libgcrypt and define LIBGCRYPT_CFLAGS and LIBGCRYPT_LIBS.
-dnl MINIMUN-VERSION is a string with the version number optionalliy prefixed
-dnl with the API version to also check the API compatibility. Example:
-dnl a MINIMUN-VERSION of 1:1.2.5 won't pass the test unless the installed
-dnl version of libgcrypt is at least 1.2.5 *and* the API number is 1.  Using
-dnl this features allows to prevent build against newer versions of libgcrypt
-dnl with a changed API.
-dnl
-AC_DEFUN([AC_NETATALK_PATH_LIBGCRYPT],
-[ AC_ARG_WITH(libgcrypt-dir,
-            AS_HELP_STRING([--with-libgcrypt-dir=PATH],
-                           [path where LIBGCRYPT is installed (optional).
-			    Must contain lib and include dirs.]),
-     libgcrypt_config_prefix="$withval", libgcrypt_config_prefix="")
-  if test x$libgcrypt_config_prefix != x ; then
-     if test x${LIBGCRYPT_CONFIG+set} != xset ; then
-        LIBGCRYPT_CONFIG=$libgcrypt_config_prefix/bin/libgcrypt-config
-     fi
-  fi
+dnl Check for libgcrypt
+AC_DEFUN([AC_NETATALK_LIBGCRYPT], [
 
-  ok=no
-
-if test x$libgcrypt_config_prefix != xno ; then
-
-  AC_PATH_PROG(LIBGCRYPT_CONFIG, libgcrypt-config, no)
-  tmp=ifelse([$1], ,1:1.2.0,$1)
-  if echo "$tmp" | grep ':' >/dev/null 2>/dev/null ; then
-     req_libgcrypt_api=`echo "$tmp"     | sed 's/\(.*\):\(.*\)/\1/'`
-     min_libgcrypt_version=`echo "$tmp" | sed 's/\(.*\):\(.*\)/\2/'`
-  else
-     req_libgcrypt_api=0
-     min_libgcrypt_version="$tmp"
-  fi
-
-  AC_MSG_CHECKING(for LIBGCRYPT - version >= $min_libgcrypt_version)
-  if test "$LIBGCRYPT_CONFIG" != "no" ; then
-    req_major=`echo $min_libgcrypt_version | \
-               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\1/'`
-    req_minor=`echo $min_libgcrypt_version | \
-               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\2/'`
-    req_micro=`echo $min_libgcrypt_version | \
-               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\3/'`
-    libgcrypt_config_version=`$LIBGCRYPT_CONFIG --version`
-    major=`echo $libgcrypt_config_version | \
-               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
-    minor=`echo $libgcrypt_config_version | \
-               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
-    micro=`echo $libgcrypt_config_version | \
-               sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\3/'`
-    if test "$major" -gt "$req_major"; then
-        ok=yes
+AC_ARG_WITH(libgcrypt-dir,
+    AS_HELP_STRING([--with-libgcrypt-dir=PATH],
+                   [path where LIBGCRYPT is installed (optional).
+                   Must contain lib and include dirs.]),
+                   netatalk_cv_libgcrypt=$withval)
+    if test x$netatalk_cv_libgcrypt != x ; then
+        LIBGCRYPT_CFLAGS="-I$netatalk_cv_libgcrypt/include"
+        LIBGCRYPT_LIBS="-L$netatalk_cv_libgcrypt/lib"
     else
-        if test "$major" -eq "$req_major"; then
-            if test "$minor" -gt "$req_minor"; then
-               ok=yes
-            else
-               if test "$minor" -eq "$req_minor"; then
-                   if test "$micro" -ge "$req_micro"; then
-                     ok=yes
-                   fi
-               fi
-            fi
-	   fi
-	fi
-  fi
-  if test $ok = yes; then
-    AC_MSG_RESULT([yes ($libgcrypt_config_version)])
-  else
-    AC_MSG_RESULT(no)
-  fi
-fi
-
-  if test $ok = yes; then
-     # If we have a recent libgcrypt, we should also check that the
-     # API is compatible
-     if test "$req_libgcrypt_api" -gt 0 ; then
-        tmp=`$LIBGCRYPT_CONFIG --api-version 2>/dev/null || echo 0`
-        if test "$tmp" -gt 0 ; then
-           AC_MSG_CHECKING([libgcrypt API version])
-           if test "$req_libgcrypt_api" -eq "$tmp" ; then
-             AC_MSG_RESULT([okay])
-           else
-             ok=no
-             AC_MSG_RESULT([does not match. want=$req_libgcrypt_api got=$tmp])
-           fi
-        fi
-     fi
-  fi
-  if test $ok = yes; then
-     # Opensolaris 11/08 provided libgcrypt doesn't have CAST5,
-     # so we better check the general case
-      AC_MSG_CHECKING([libgcrypt hast CAST5 API])
-      cast=`$LIBGCRYPT_CONFIG --algorithms 2>/dev/null | grep cast5 | sed 's/\(.*\)\(cast5\)\(.*\)/\2/'`
-      if test x$cast = xcast5 ; then
-        AC_MSG_RESULT([yes])
-      else
-        AC_MSG_RESULT([no])
-        echo "***          Detected libgcryt without CAST5              ***"
-        echo "*** Please install/build another one and point to it with ***"
-        echo "***         --with-libgcrypt-dir=<path-to-lib>            ***"
-        ok=no
-      fi
-  fi
-
-  if test $ok = yes; then
-    LIBGCRYPT_CFLAGS=`$LIBGCRYPT_CONFIG --cflags`
-    LIBGCRYPT_LIBS=`$LIBGCRYPT_CONFIG --libs`
-    neta_cv_compile_dhx2=yes
-    neta_cv_have_libgcrypt=yes
-	AC_MSG_NOTICE([Enabling DHX2 UAM])
-	AC_DEFINE(HAVE_LIBGCRYPT, 1, [Define if the DHX2 modules should be built with libgcrypt])
-	AC_DEFINE(UAM_DHX2, 1, [Define if the DHX2 UAM modules should be compiled])
-    ifelse([$2], , :, [$2])
-  else
-    if test x$libgcrypt_config_prefix != x"no" ; then
-      AC_MSG_ERROR([Could not find libgcrypt development files needed for the DHX2 UAM, please install the libgcrypt devel package])
+        PKG_CHECK_MODULES(LIBGCRYPT, [libgcrypt >= 1.2.3],
+            ac_cv_have_libgcrypt=yes,
+            [AC_MSG_ERROR([Could not find libgcrypt development files needed for the DHX2 UAM, please install libgcrypt version 1.2.3 or later])])
+    fi
+    if test x"$ac_cv_have_libgcrypt" = x"yes" -o x$netatalk_cv_libgcrypt != x; then
+            neta_cv_compile_dhx2=yes
+            neta_cv_have_libgcrypt=yes
+            AC_MSG_NOTICE([Enabling DHX2 UAM])
+            AC_DEFINE(HAVE_LIBGCRYPT, 1, [Define if the DHX2 modules should be built with libgcrypt])
+            AC_DEFINE(UAM_DHX2, 1, [Define if the DHX2 UAM modules should be compiled])
+            AC_SUBST(LIBGCRYPT_CFLAGS)
+            AC_SUBST(LIBGCRYPT_LIBS)
     fi
-    LIBGCRYPT_CFLAGS=""
-    LIBGCRYPT_LIBS=""
-    ifelse([$3], , :, [$3])
-  fi
-  AC_SUBST(LIBGCRYPT_CFLAGS)
-  AC_SUBST(LIBGCRYPT_LIBS)
 ])
